#include <iostream>
#include <fstream>
#include <chrono>

using namespace std;
using namespace std::chrono;

class Champion {
private:
	string position;
	string name;
	int hp;
	int attack;
	int shield;

public:
	Champion() {}
	Champion(const string& position, string& name, int hp, int attack, int shield) :position(position), name(name), hp(hp), attack(attack), shield(shield) {}

	string getPosition() const {
		return position;
	}
	string getName() const {
		return name;
	}
	int getHp() const {
		return hp;
	}
	int getAttack() const {
		return attack;
	}
	int getShield() const {
		return shield;
	}

	void show() const {
		cout << "포지션 : " << position << "  이름 : " << name << "  hp : " << hp << "  공격력 : " << attack << "  방어력 : " << shield << '\n';
	}

};


struct SNode {
	Champion data;
	SNode* next;
};

struct DNode {
	Champion data;
	DNode* next;
	DNode* prev;
};

void swap_SL(SNode* a, SNode* b) {
	Champion temp = a->data;
	a->data = b->data;
	b->data = temp;
}

void swap_DL(DNode* a, DNode* b) {
	Champion temp = a->data;
	a->data = b->data;
	b->data = temp;
}


class LinkedList {
private:
	SNode* head;

public:
	LinkedList() { head = NULL; }

	void addNode_SL(Champion champ) {
		SNode* newNode = new SNode;
		newNode->data = champ;
		newNode->next = head;
		head = newNode;
	}

	void PrintAll_SL() {
		SNode* temp = head;
		while (temp != NULL) {
			temp->data.show();
			temp = temp->next;
		}
	}

	void SortByName_SL() {
		if (head == NULL || head->next == NULL) {
			return; 
		}

		bool swapped;
		do {
			swapped = false;
			SNode* current = head;
			while (current->next != NULL) {
				if (current->data.getName() > current->next->data.getName()) {
					swap_SL(current, current->next);
					swapped = true;
				}
				current = current->next;
			}
		} while (swapped);
	}

	void FindMaxHp() {
		if (head == NULL) {
			cout << "비어있습니다." << endl;
			return;
		}

		SNode* temp = head;
		SNode* maxNode = head;
		while (temp != NULL) {
			if (temp->data.getHp() > maxNode->data.getHp()) {
				maxNode = temp;
			}
			temp = temp->next;
		}
		maxNode->data.show();
	}

};

class DoubleLinkedList {
private:
	DNode* head;
	DNode* tail;

public:
	DoubleLinkedList() { head = NULL, tail = NULL; }

	void addNode_DL(Champion champ) {
		DNode* newNode = new DNode;
		newNode->data = champ;
		newNode->next = head;
		if (head != NULL) {
			head->prev = newNode;
		}
		head = newNode;
		if (tail == NULL) {
			tail = newNode;
		}
	}


	void PrintAll_DL() {
		DNode* temp = head;
		while (temp != NULL) {
			temp->data.show();
			temp = temp->next;
		}
	}

	void SortByName_DL() {
		if (head == NULL || head->next == NULL) {
			return;
		}

		bool swapped;
		do {
			swapped = false;
			DNode* current = head;
			while (current->next != NULL) {
				if (current->data.getName() > current->next->data.getName()) {
					swap_DL(current, current->next);
					swapped = true;
				}
				current = current->next;
			}
		} while (swapped);
	}

	Champion FindMaxHp_DL() {
		if (head == NULL) {
			cout << "비어있습니다." << endl;
			return Champion();
		}

		DNode* temp = head;
		Champion maxHpChamp = temp->data;
		while (temp != NULL) {
			if (temp->data.getHp() > maxHpChamp.getHp()) {
				maxHpChamp = temp->data;
			}
			temp = temp->next;
		}

		maxHpChamp.show();

		return maxHpChamp;
	}

};


int main() {

	ifstream in{ "LOLDic.txt" };

	if (not in)
		return 0;

	LinkedList list;
	DoubleLinkedList doubleList;
	string position, name;
	int hp, attack, shield;

	while (in >> position >> name >> hp >> attack >> shield) {
		Champion champ(position, name, hp, attack, shield);
		list.addNode_SL(champ);
		doubleList.addNode_DL(champ);
	}


	auto start = chrono::high_resolution_clock::now();
	list.PrintAll_SL();
	auto stop = chrono::high_resolution_clock::now();
	auto duration_sl = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << "=================================================================================================================" << '\n';
	cout << "=================================================================================================================" << '\n';
	start = chrono::high_resolution_clock::now();
	doubleList.PrintAll_DL();
	stop = chrono::high_resolution_clock::now();
	auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << "PrintAll_SL() 수행 시간 : " << duration_sl.count() / 1000000.0 << " 초" << '\n';
	cout << "PrintAll_DL() 수행 시간 : " << duration.count() / 1000000.0 << " 초" << '\n';
	cout << "=================================================================================================================" << '\n';


	//=====================================================================================================
	start = chrono::high_resolution_clock::now();
	list.SortByName_SL();
	stop = chrono::high_resolution_clock::now();
	duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << "SortByName_SL() 수행 시간 : " << duration.count() / 1000000.0 << " 초" << '\n';

	start = chrono::high_resolution_clock::now();
	doubleList.SortByName_DL();
	stop = chrono::high_resolution_clock::now();
	duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << "SortByName_DL() 수행 시간 : " << duration.count() / 1000000.0 << " 초" << '\n';
	cout << "=================================================================================================================" << '\n';


	//=====================================================================================================
	start = chrono::high_resolution_clock::now();
	list.FindMaxHp();
	stop = chrono::high_resolution_clock::now();
	duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << "FindMaxHp_SL() 수행 시간 : " << duration.count() / 1000000.0 << " 초" << " 초" << '\n';

	start = chrono::high_resolution_clock::now();
	doubleList.FindMaxHp_DL();
	stop = chrono::high_resolution_clock::now();
	duration = chrono::duration_cast<chrono::microseconds>(stop - start);
	cout << "FindMaxHp_DL() 수행 시간 : " << duration.count() / 1000000.0 << " 초" << '\n';

	return 0;

}
